#1
set.seed(123) 
X = matrix(rpois(9,1.5),nrow=3)

colnames(X) = c("aspirin","paracetamol","nurofen")

rownames(X) = paste("Trial",1:3,sep=".")

X
        aspirin paracetamol nurofen
Trial.1       1           3       1
Trial.2       2           4       3
Trial.3       1           0       1

mean(X[,3])  # Mean of the 3rd column

var(X[3,]) # Variance of the 3rd row

#2

X
        aspirin paracetamol nurofen
Trial.1       1           3       1
Trial.2       2           4       3
Trial.3       1           0       1

rowSums(X)

colSums(X)

#3

rowMeans(X)

colMeans(X)
 
colMeans(X)[3]

#4
X
        aspirin paracetamol nurofen
Trial.1       3           1       3
Trial.2       2           2       2
Trial.3       2           0       5

apply(X,1,summary)                # 1 is for rows

apply(X,2,summary)                 # 2 is for columns

#5

apply(X,1,mean)

# This is equivalent to:

rowMeans(X)

# Let's "scale"/"center" the values in the rows. We subtract each value from the mean of its row

apply(X,1,function(x) (x-mean(x)))    # Scale the values in the rows

#6

X > 2

apply(X > 2, 1, sum)            # Its a tie it seems

max(apply(X > 2, 1, sum))

which(apply(X > 2,1,sum) == max(X>2) )

as.numeric(TRUE)

as.numeric(FALSE)

#7

A = matrix(c(1,3,2,2,8,9),3,2)
t(A)

#8
A

B = matrix(c(5,8,4,2),2,2)

A %*% B

#9


A = matrix(1:4,2,2)

B = solve(A)

B

A %*% B            # We get the identity matrix

#10

A

b = c(7,10)
x = solve(A) %*% b

#12

family1 = list(husband="Fred", wife="Wilma", numofchildren=3, agesofkids=c(8,11,14))

length(family1)  # Has 4 elements

family1

str(family1)

#13

family1 = list(husband="Fred", wife="Wilma", numofchildren=3, agesofkids=c(8,11,14))

family1$agesofkids    # If the list elements have names then use "$" to access the element

family1$agesofkids[1:2]

sapply(family1,class)

sapply(family1,length)

family2 = list("Barney","Betty",2,c(4,6))

#14

family2 = list("Barney","Betty",2,c(4,6))

#15

unlist(family1)

#16

data(mtcars)   # Load mtcars into the environment

mylm = lm(mpg ~ wt, data = mtcars)

print(mylm)

typeof(mylm)

#17
str(mylm,give.attr=F)  # Lots of stuff here

#18

names(mylm)

mylm$effects

# Some use the $ notation to extract desired information they want straight from the function call

lm(mpg ~ wt, data = mtcars)$coefficients

#19

my.summary <- function(x) {
	return.list = list()       # Declare the list

	return.list$mean = mean(x)
	return.list$sd = sd(x)
	return.list$var = var(x)

	return(return.list)   
}

my.summary(1:10)

names(my.summary(1:10))

my.summary(1:10)$var     # Here we exploit the $ notation to get only what we want

#20

mystring = "This is a test"

mys = strsplit(mystring, " ")

str(mys)

mys

mys[[1]][1]

mys[[1]][1:2]

unlist(mys)

#23

sapply(family1,mean)

sapply(family1, function(x) { if (is.numeric(x)) print(mean(x))})


#25

transvec = c(1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1)

table(transvec)    # Count 'em up. Which are Auto and Manual ?

mytransfac = factor(transvec, levels = c(0,1), labels = c("Auto","Man") )

table(mytransfac)

levels(mytransfac)

mytransfac

#26

library(lattice)
xyplot(mpg~wt | mytransfac, mtcars, main="MPG vs Weight - Auto and Manual Transmissions")

bwplot(~mpg|mytransfac, mtcars, main="MPG - Auto and Manual Transmissions",layout=c(1,2))


#27

mympg = c(21,21,22.8,21.4,18.7,18.1,14.3,24.4,22.8,19.2,17.8,16.4,17.3,15.2,10.4,
        10.4,14.7,32.4,30.4,33.9,21.5,15.5,15.2,13.3,19.2,27.3,26,30.4,15.8,19.7,15,21.4)


tapply(mympg,mytransfac,mean)

#28

cut(0:10,breaks=4)

table(cut(0:10,breaks=4))

#29

my.cut = cut(0:10,breaks=4,labels=c("Q1","Q2","Q3","Q4")) 


table(my.cut)

#30

quantile(0:10)

table(cut(0:10,breaks=quantile(0:10),include.lowest=TRUE))

#31

set.seed(123)

exam.score = runif(25,50,100)

cut(exam.score,breaks=c(50,60,70,80,90,100))

cut(exam.score,breaks=c(50,60,70,80,90,100),labels=c("F","D","C","B","A"))

my.table = table(cut(exam.score,breaks=c(50,60,70,80,90,100),labels=c("F","D","C","B","A")))

barchart(my.table,main="Grade BarChart",col=terrain.colors(5))

#33

cut(exam.score,breaks=c(50,60,70,80,90,100))

cut(exam.score,breaks=c(50,60,70,80,90,100),right=F)

#34

exam.score = runif(25,50,100)

acount = 0
bcount = 0
ccount = 0
dcount = 0
fcount = 0
exam.score = runif(25,50,100)
for (ii in 1:length(exam.score)) {
  
 if (exam.score[ii] < 60) {fcount = fcount + 1} else
   if ((exam.score[ii] >= 60) & (exam.score[ii] < 70)) {dcount = dcount + 1} else
     if ((exam.score[ii] >= 70) & (exam.score[ii] < 80)) {ccount = ccount +1} else
       if ((exam.score[ii] >= 80) & (exam.score[ii] < 90)) {bcount = bcount +1} else
          if ((exam.score[ii] >= 90) & (exam.score[ii] <= 100)) {acount = acount +1}
}
cat("acount bcount ccount dcount fcount")
cat(acount,bcount,ccount,dcount,fcount)


#35

mons =c("Jan","Feb","Mar","Apr","May","Jun","Jan","Feb","May","Jun", "Apr","Mar")

my.fact.mons = factor(mons)

my.fact.mons[1] < my.fact.mons[2]

levels(my.fact.mons)

#36

my.fact.mons = factor(mons, labels=c("Jan","Feb","Mar","Apr","May","Jun"),ordered=TRUE)

my.fact.mons

my.fact.mons[1] < my.fact.mons[2]

table(my.fact.mons)

levels(my.fact.mons)                       # This is what we want !


#42 (Data Frames - if we get this far)

names = c("P1","P2","P3","P4","P5")
temp = c(98.2,101.3,97.2,100.2,98.5)
pulse = c(66,72,83,85,90)
gender = c("M","F","M","M","F")

for (ii in 1:length(gender)) {  
   print.string = c(names[ii],temp[ii],pulse[ii],gender[ii])
   print(print.string)
}

#43

names=c("P1","P2","P3","P4","P5")
temp=c(98.2,101.3,97.2,100.2,98.5)
pulse=c(66,72,83,85,90)
gender=c("M","F","M","M","F")

my_df = data.frame(names,temp,pulse,gender) # Much more flexible

#46

sapply(mtcars, class)

#47

str(mtcars)

nrow(mtcars)	# How many rows does it have ?

ncol(mtcars)	# How many columns are there ?

#48

rownames(mtcars)

rownames(mtcars) = 1:32

#49

mtcars[,-11]

mtcars		# Notice that carb is included

mtcars[,-3:-5]	# Print all columns except for columns 3 through 5

mtcars[,c(-3,-5)]

#50 

mtcars[mtcars$mpg >= 30.0,]

mtcars[mtcars$mpg >= 30.0,2:6]

mtcars[mtcars$mpg >= 30.0 & mtcars$cyl < 6,]

#51

mtcars[mtcars$am==0,]

nrow(mtcars[mtcars$am == 0,])

nrow(mtcars[mtcars$am == 1,])

#52

url = "http://www.bimcore.emory.edu/BIOS560R/DATA.DIR/hsb2.csv"

data1 = read.table(url,header=T,sep=",")

head(data1)

sapply(data1,class)		# Applies the “Class” function to all columns

#53

myclasses = c("character","integer","integer",
                "integer","character","factor","integer","integer",
                "integer","integer","numeric")

data1 = read.table("http://www.bimcore.emory.edu/BIOS560R/DATA.DIR/hsb2.csv",
                      header=T,
                      sep=",",
                      colClasses = myclasses)

sapply(data1,class)

#54

str(mtcars)

unique(mtcars$am)   # Tells us what the unique values are

#55

sapply(mtcars[,8:11], unique)


#56

mtcars$am = factor(mtcars$am, levels = c(0,1), labels = c("Auto","Man") )

str(mtcars$am)

head(mtcars,5)
 
tapply(mtcars$mpg,mtcars$am,mean)

tapply(mtcars$mpg,mtcars$am,quantile)
  













